<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHybrid_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Controls
/**/
C_UP = vk_up;
C_DOWN = vk_down;
C_LEFT = vk_left;
C_RIGHT = vk_right;
/**//*
C_UP = ord('W');
C_DOWN = ord('S');
C_LEFT = ord('A');
C_RIGHT = ord('D');
*/
C_FIRE = ord('Z');

// Movement variables
m_x = 0;
m_y = 0;
walkSpeed = 8;
moving = 0;

image_speed = 0.5;

// Combat variables
ammo = 8;
weapon = 0;
firing = 0;


// Create UI
drawManager = instance_create(x,y,objDrawManager);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inputs
if keyboard_check(C_UP) { m_y = -1; moving = 1; }
if keyboard_check(C_DOWN) { m_y = 1; moving = 1; }
if keyboard_check(C_LEFT) { m_x = -1; moving = 1; }
if keyboard_check(C_RIGHT) { m_x = 1; moving = 1; }

if keyboard_check_released(C_UP) { m_y = 0; moving = 0; }
if keyboard_check_released(C_DOWN) { m_y = 0; moving = 0; }
if keyboard_check_released(C_LEFT) { m_x = 0; moving = 0; }
if keyboard_check_released(C_RIGHT) { m_x = 0; moving = 0; }

if keyboard_check_pressed(C_FIRE) { firing = 1; }

// Movement Physics
// Direction
direction = point_direction(0, 0, m_x, m_y);//darctan2(-m_y, m_x);

// Speed
if (moving == 1) {
    speed = walkSpeed;
    vspeed = vspeed * 0.6;
}
if (moving != 1) {
    speed = 0;
}

/*
if (moving == 1) {
    accel_x = cos(arctan2(-m_y, m_x))*walkSpeed;
    accel_y = sin(arctan2(m_y, m_x))*walkSpeed;
}
if (moving != 1) {
    accel_x = 0;
    accel_y = 0;
}

x += accel_x;
y += accel_y;
*/

// Firing
if (firing == 1) {
    if (ammo &gt; 0) {
        ammo -= 1;
    }
    firing = 0;
}


// Sprite
if (speed == 0) sprite_index = sprHybrid_idle;
if (speed &gt; walkSpeed*0.5 || speed &lt; -(walkSpeed*0.5)) sprite_index = sprHybrid_walk;

if (m_x == -1) image_xscale = -1;
if (m_x == 1) image_xscale = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
